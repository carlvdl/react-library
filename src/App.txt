import React from 'react';
import {Route, useNavigate} from 'react-router-dom';
import { Navigate, Routes} from 'react-router-dom';

import './App.css';
import { HomePage } from './layouts/HomePage/HomePage';
import { Footer } from './layouts/NavbarAndFooter/Footer';
import { Navbar } from './layouts/NavbarAndFooter/Navbar';
import { SearchBooksPage } from './layouts/SearchBooksPage/SearchBooksPage';
import { ShelfPage } from './layouts/ShelfPage/ShelfPage';
import { MessagesPage } from './layouts/MessagesPage/MessagesPage';

import { Auth0Provider, withAuthenticationRequired } from '@auth0/auth0-react';
import LoginPage from "./Auth/LoginPage";
import { auth0Config } from './lib/auth0Config';

// import auth0Config from './auth/auth0-config';
// import { SearchBooksPage } from './layouts/SearchBooksPage/SearchBooksPage';
// import { oktaConfig } from './lib/oktaConfig';
// import { OktaAuth, toRelativeUrl } from '@okta/okta-auth-js';
// import { Security, LoginCallback, SecureRoute } from '@okta/okta-react';
// import LoginWidget from './Auth/LoginWidget';
// import { ReviewListPage } from './layouts/Boo    kCheckoutPage/ReviewListPage/ReviewListPage';
// import { ShelfPage } from './layouts/ShelfPage/ShelfPage';
// import { MessagesPage } from './layouts/MessagesPage/MessagesPage';
// import { ManageLibraryPage } from './layouts/ManageLibraryPage/ManageLibraryPage';


// const SecureRoute = ({ component, path, ...args }: { component: React.ComponentType<any>, path: string }) => (
//     <Route path={path} component={withAuthenticationRequired(component)} {...args} />
// );

const Auth0ProviderWithNavigate = ({ children }: { children: React.ReactNode }) => {
    const navigate = useNavigate();

    const onRedirectCallback = (appState: any) => {
        navigate(appState?.returnTo || '/home');
    };

    return (
        <Auth0Provider
            domain={auth0Config.issuer}
            clientId={auth0Config.clientId}
            authorizationParams={{
                redirect_uri: auth0Config.redirectUri,
                audience: auth0Config.audience,
                scope: auth0Config.scope,
            }}
            onRedirectCallback={onRedirectCallback}
        >
            {children}
        </Auth0Provider>
    );
};

// const Auth0ProviderWithHistory = ({ children }: { children: React.ReactNode }) => {
//     const history = useHistory();
//
//     const onRedirectCallback = (appState: any) => {
//         history.push(appState?.returnTo || "/home");
//     };
//
//     return (
//         <Auth0Provider
//             domain={auth0Config.issuer}
//             clientId={auth0Config.clientId}
//             authorizationParams={{
//                 redirect_uri: auth0Config.redirectUri,
//                 audience: auth0Config.audience,
//                 scope: auth0Config.scope,
//             }}
//             onRedirectCallback={onRedirectCallback}
//         >
//             {children}
//         </Auth0Provider>
//     );
// };

const SecureRoute = ({ component: C, path, ...args }: { component: React.ComponentType<any>; path: string }) => (
    <Route path={path} element={<C />} {...args} />
);

export const App = () => {

    // const customAuthHandler = () => {
    //   navigate('/login');
    // }

    // const navigate = useNavigate();
    //
    // const restoreOriginalUri = async (_oktaAuth: any, originalUri: any) => {
    //   const relativeUrl = toRelativeUrl(originalUri || '/', window.location.origin);
    //   navigate(relativeUrl, { replace: true });
    // };

    return (
        <div className='d-flex flex-column min-vh-100'>
            <Navbar />
            <div className='flex-grow-1'>
                <Routes>
                    <Route path='/' element={<Navigate to='/home' replace />} />
                    <Route path='/home' element={<HomePage />} />
                    <Route path='/search' element={<SearchBooksPage />} />

                    <Route path="/shelf" element={React.createElement(withAuthenticationRequired(ShelfPage))} />
                    <Route path="/messages" element={React.createElement(withAuthenticationRequired(MessagesPage))} />
                    <Route path="/login" element={<LoginPage />} />
                    {/*<SecureRoute path='/' component={MessagesPage} />*/}
                    {/*<SecureRoute path='/admin' component={ManageLibraryPage} />*/}

                    {/*<Route path='/login' element={<LoginWidget config={oktaConfig} />} />*/}
                    {/*<Route path='/login' render={*/}
                    {/*    () => <LoginWidget config={oktaConfig} />*/}
                    {/*}*/}
                    {/*/>*/}
                </Routes>


            </div>
            <Footer />
        </div>
    );
}
